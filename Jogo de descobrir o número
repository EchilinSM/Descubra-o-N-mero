HTML
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <title>Ache o Número</title>
</head>
<body>
    <div class="content">
        <h1>Descubra o número de 0 a 100</h1>
        <p id="record">🏆 Recorde: Nenhum</p>
        <input type="number" placeholder="Digite um número" id="bet">
        <button onclick="verifyNumber()">Enviar</button>
        <button onclick="giveHint()">Dica</button>
        <button onclick="refresh()">🔄 Reiniciar</button>
        <p id="feedback"></p>
        <p id="attempts">Tentativas restantes: 10</p>
    </div>
</body>

<script>
    var numberToFind = 0;
    var attempts = 0;
    var maxAttempts = 10;
    var bestScore = localStorage.getItem('bestScore') || Infinity;

    function refresh() {
        numberToFind = parseInt(Math.random() * 100);
        attempts = 0;
        document.getElementById('bet').value = '';
        document.getElementById('feedback').innerText = '';
        document.getElementById('attempts').innerText = "Tentativas restantes: " + maxAttempts;
        updateRecordDisplay();
        console.log('Número para encontrar: ' + numberToFind);
    }

    function verifyNumber() {
        var element = document.getElementById('bet');
        var bet = Number(element.value);

        if (bet > 100 || bet < 0 || isNaN(bet)) {
            updateFeedback('⚠️ Aposta inválida!', 'red');
            return;
        }

        attempts++;
        document.getElementById('attempts').innerText = "Tentativas restantes: " + (maxAttempts - attempts);

        if (bet > numberToFind) {
            updateFeedback('📉 O número é MENOR!', 'orange');
        } else if (bet < numberToFind) {
            updateFeedback('📈 O número é MAIOR!', 'blue');
        } else {
            updateFeedback('🎉 Parabéns! Você acertou em ' + attempts + ' tentativas!', 'green');

            if (attempts < bestScore) {
                bestScore = attempts;
                localStorage.setItem('bestScore', bestScore);
                alert('🥇 Novo recorde: ' + bestScore + ' tentativas!');
            }
            refresh();
            return;
        }

        if (attempts >= maxAttempts) {
            updateFeedback('💀 Você perdeu! O número era ' + numberToFind, 'red');
            refresh();
        }
    }

    function giveHint() {
        var element = document.getElementById('bet');
        var bet = Number(element.value);

        if (isNaN(bet) || bet < 0 || bet > 100) {
            updateFeedback('Digite um número válido para receber uma dica.', 'red');
            return;
        }

        var difference = Math.abs(bet - numberToFind);

        if (difference === 0) {
            updateFeedback('🎉 Você já acertou!', 'green');
        } else if (difference <= 5) {
            updateFeedback('🔥 Está muito perto!', 'orange');
        } else if (difference <= 15) {
            updateFeedback('⚡ Está relativamente perto.', 'blue');
        } else {
            updateFeedback('❄️ Está longe.', 'gray');
        }
    }

    function updateFeedback(message, color) {
        var feedback = document.getElementById('feedback');
        feedback.innerText = message;
        feedback.style.color = color;
    }

    function updateRecordDisplay() {
        document.getElementById('record').innerText = '🏆 Recorde: ' + (bestScore === Infinity ? 'Nenhum' : bestScore + ' tentativas');
    }

    refresh();
</script>
</html>

CSS
:root{
    --color-white: #ffffff;
    --color-blue: rgb(82, 131, 180);
    --color-blue2: rgb(25, 125, 225);
    --color-gray: rgb(238, 238, 238);
}

body{
    all: unset;
    font-family: Arial, Helvetica, sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    background-color: var(--color-blue);
}

.content{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 1rem;
    background-color: rgba(0,0,0,0.6);
    color: var(--color-white);
    padding: 3rem 4rem;
    border-radius: 1rem;
}

.content input{
    background-color: transparent;
    border: none;
    border-bottom: 1px solid var(--color-gray);
    color: var(--color-white);
    outline: none;
    padding: .4rem;
    width: 50%;
    font-size: 1rem;
}

.content input::placeholder{
    color: var(--color-white);
}

.content input:focus{
    border-bottom: 1px solid var(--color-blue);
}

.content button{
    padding: .8rem;
    width: 80%;
    font-size: 1rem;
    background-color: var(--color-blue2);
    border: none;
    border-radius: 1rem;
    color: var(--color-white);
    margin-top: 2rem;
    cursor: pointer;
    transition: .4s;
}

.content button:hover{
    background-color: var(--color-blue);
}






IB: Gustavo Neitzke
github.com/Gutoneitzke
